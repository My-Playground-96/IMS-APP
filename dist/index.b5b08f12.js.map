{"mappings":"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","sources":["src/js/teacher.js"],"sourcesContent":["const form = document.querySelector('#regForm');\nconst idInput = document.querySelector('#txt-id');\nconst nameInput = document.querySelector('#txt-name');\nconst contactInput = document.querySelector('#txt-contact');\nconst btnNewUser = document.querySelector('.btn-new-user');\nconsole.log(btnNewUser.innerHTML);\nconst btnSave = document.querySelector('.btn-success');\nconst btnClear = document.querySelector('.btn-warning');\nconst tableBody = document.querySelector('.userTableBody');\nlet isUpdateMode = false;\n// const { API_URL } = process.env;\nconst API_URL = 'http://localhost:8080'; // Set your API URL here\n\n\n//Create user class\nclass User {\n    static lastId = 0;\n\n    name;\n    contact;\n\n    constructor(name, contact) {\n        this.name = name;\n        this.contact = contact;\n        User.lastId++;\n        \n    }\n   \n}\n\n//Disable input fields on page load\nidInput.disabled = true;\nnameInput.disabled = true;\ncontactInput.disabled = true;\n\nloadTeachers();\n\n//Load all the details\nasync function loadTeachers(){\n    try{\n        const response = await fetch (`${API_URL}/teachers`);\n        if(!response.ok){\n            throw new Error('Failed to fetch teachers');\n            alert('Failed to fetch teachers');\n        }\n        const teachers = await response.json();\n        console.log(teachers);\n        displayTeachers(teachers);\n    }catch(error){\n        console.error(error);\n        alert('Failed to load teachers. Please try again.');\n    }\n}\n\nfunction displayTeachers(teachers) {\n    tableBody.innerHTML = '';\n\n    if(teachers.length === 0) {\n        const noDataRow = document.createElement('tr');\n        noDataRow.innerHTML = '<td colspan=\"4\" class=\"text-center py-5 no-data-found\">No Data Found!</td>';\n        tableBody.append(noDataRow);\n        return;\n    }\n\n    teachers.forEach(teacher => {\n        const row = document.createElement('tr');\n        row.innerHTML = `\n            <td class=\"d-flex justify-content-center\">${teacher.id}</td>\n            <td>${teacher.name}</td>\n            <td>${teacher.contact}</td>\n            <td class=\"d-flex justify-content-center\">\n                <i class=\"bi bi-pencil me-2\" title=\"Edit\"></i>\n                <i class=\"bi bi-trash\" title=\"Delete\"></i>\n            </td>\n        `;\n        tableBody.appendChild(row);\n    })\n}\n\nbtnNewUser.addEventListener('click', async () => {\n    try {\n        // Fetch the last added teacher's ID from the backend\n        const response = await fetch(`${API_URL}/teachers`);\n        if (!response.ok) {\n            throw new Error('Failed to fetch teachers');\n        }\n        const teachers = await response.json();\n\n        // Find the maximum ID from the teachers array\n        const maxId = teachers.reduce((max, teacher) => Math.max(max, teacher.id), 0);\n\n        // Set the new ID in the ID input field\n        idInput.value = maxId + 1;\n\n        // Enable the input fields when the button is clicked\n        nameInput.disabled = false;\n        contactInput.disabled = false;\n    } catch (error) {\n        console.error(error);\n        alert('Failed to load teachers. Please try again.');\n    }\n});\n\n\n//Validate the data inputs\n//Event listners for input validation\nnameInput.addEventListener('input', validateName);\ncontactInput.addEventListener('input', validateAddress);\n\nfunction validateForm(){\n    return validateName() && validateAddress();\n}\n\n//Validate the name input\nfunction validateName(){\n    const nameValue = nameInput.value.trim();\n    const nameRegex = /^[a-zA-Z\\s]+$/;\n\n    if(nameValue === ''){\n        showError(nameInput, 'Name is required');\n        return false;\n    }else if (!nameRegex.test(nameValue)){\n        showError(nameInput,'Invalid Name! Only letters and white spaces are allowed');\n        return false;\n    }else {\n        hideError(nameInput);\n        return true;\n    }\n}\n//Validate the address input\nfunction validateAddress(){\n    const contactValue = contactInput.value.trim();\n\n    if(contactValue === ''){\n        showError(contactInput, 'Address is required');\n        return false;\n    }else if(contactValue.length < 4){\n        showError(contactInput, 'Address must be at least 4 characters long');\n        return false;\n    }else {\n        hideError(contactInput);\n        return true;\n    }\n}\n\n//Show error messages\nfunction showError(inputField, errorMessage) {\n    inputField.classList.add(\"is-invalid\");\n    const errorContainer = document.getElementById(`${inputField.id}-error`);\n    errorContainer.textContent = errorMessage;\n    errorContainer.style.display = 'block';\n}\n\n//Hide error message\nfunction hideError(inputField) {\n    inputField.classList.remove(\"is-invalid\");\n    const errorContainer = document.getElementById(`${inputField.id}-error`);\n    errorContainer.textContent = '';\n    errorContainer.style.display = 'none';\n}\n\n//Add teacher to table\nbtnSave.addEventListener('click', async() => {\n    const name = nameInput.value.trim();\n    const contact = contactInput.value.trim();\n\n    const teacherData = {\n        name: name,\n        contact: contact\n    };\n\n    if (validateForm()) {\n        try{\n            let response;\n            if(isUpdateMode){\n                 // If in update mode, send a PATCH request to update the teacher\n                 response = await fetch(`${API_URL}/teachers/${idInput.value}`, {\n                    method: 'PATCH',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(teacherData),\n                });\n                if (!response.ok) {\n                    throw new Error('Failed to update the teacher.');\n                }\n                updateTeacherInTable();\n                isUpdateMode = false;\n            }else {\n                response = await fetch(`${API_URL}/teachers`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(teacherData),\n                });\n    \n                if (!response.ok) {\n                    throw new Error('Failed to add the teacher.');\n                }\n                // If the request is successful, update the frontend table\n                const newTeacher = await response.json();\n                addTeacherToTable(newTeacher);\n\n                 // Clear the form inputs\n                form.reset();\n\n                nameInput.disabled = true;\n                contactInput.disabled = true;\n                alert('Teacher added successfully!');\n    \n            }\n        }catch (error) {\n            console.error('Error:', error.message);\n            alert('Something went wrong. Please try again.');\n        }\n       \n    };\n     \n})\n\n// Function to add a teacher to the table\nfunction addTeacherToTable(teacher) {\n    const newRow = document.createElement('tr');\n    newRow.innerHTML = `\n        <td>${teacher.id}</td>\n        <td>${teacher.name}</td>\n        <td>${teacher.contact}</td>\n        <td>\n            <i class=\"bi bi-pencil me-2\" title=\"Edit\"></i>\n            <i class=\"bi bi-trash\" title=\"Delete\"></i>\n        </td>\n    `;\n\n    tableBody.appendChild(newRow);\n\n    // If the \"No Data Found\" row exists, remove it\n    const noDataRow = document.querySelector('.no-data');\n    if (noDataRow) {\n        noDataRow.remove();\n    }\n}\n\ntableBody.addEventListener('click', (e) => {\n    if (e.target.classList.contains('bi-pencil')) {\n        // Get the selected row\n        const selectedRow = e.target.closest('tr');\n\n        // Extract user details from the row\n        const userId = selectedRow.querySelector('td:first-child').textContent;\n        const userName = selectedRow.querySelector('td:nth-child(2)').textContent;\n        const userAddress = selectedRow.querySelector('td:nth-child(3)').textContent;\n\n        // Update form values\n        idInput.value = userId;\n        nameInput.value = userName;\n        contactInput.value = userAddress;\n\n        // Enable name and address fields\n        nameInput.disabled = false;\n        contactInput.disabled = false;\n\n        // Change button text to 'Update'\n        btnSave.textContent = 'Update';\n\n        // Set update mode to true\n        isUpdateMode = true;\n    }\n});\n\n\n//Update table function\nfunction updateTeacherInTable() {\n    const tableBody = document.querySelector('.userTableBody');\n    const rows = tableBody.querySelectorAll('tr');\n\n    for (const row of rows) {\n        const userId = row.cells[0].textContent;\n\n        if (userId === idInput.value) {\n            // Update the Name and Address in the table\n            row.cells[1].textContent = nameInput.value.trim();\n            row.cells[2].textContent = contactInput.value.trim();\n            break; // Exit the loop once the row is updated\n        }\n    }\n\n    // Reset the form and button text\n    form.reset();\n    btnSave.textContent = 'Save';\n\n    // Disable name and address fields\n    nameInput.disabled = true;\n    contactInput.disabled = true;\n}\n\n//Delete a teacher\ntableBody.addEventListener('click', async (e) => {\n    if (e.target.classList.contains('bi-trash')) {\n        // Get the selected row and remove it\n        const selectedRow = e.target.closest('tr');\n        const teacherId = selectedRow.querySelector('td:first-child').textContent;\n        console.log(teacherId);\n        \n        try{\n            \n            const response = await fetch(`${API_URL}/teachers/${teacherId}`, {\n                method: \"DELETE\",\n            });\n            if(!response.ok){\n                throw new Error('Failed to delete the teacher.');\n            }\n            selectedRow.remove();\n              // If no rows are left, show the \"No Data Found\" row\n            if (tableBody.childElementCount < 1) {\n            const newRow = document.createElement('tr');\n            newRow.classList.add('no-data');\n            const newCell = document.createElement('td');\n            newCell.classList.add('text-center', 'py-5', 'no-data-found');\n            newCell.setAttribute('colspan', '4');\n            newCell.innerText = 'No data found!';\n            newRow.append(newCell);\n            tableBody.append(newRow);\n            }\n            // alert('Teacher deleted successfully!');\n        }catch(error){\n            console.error('Error:', error.message);\n            alert('Failed to delete the teacher. Please try again.');\n        }\n\n       \n    }\n});\n\n//Search teachers\nconst txtSearch = document.querySelector('.txt-search');\ntxtSearch.addEventListener('input', ()=> {\n    const searchQueary = txtSearch.value.trim().toLowerCase();\n    filterTableRows(searchQueary);\n});\n\nfunction filterTableRows(query){\n    const rows = document.querySelectorAll('.userTableBody tr:not(.no-data');\n    rows.forEach(row => {\n        const userId = row.querySelector('td:first-child').textContent.toLowerCase();\n        console.log(userId);\n        const userName = row.querySelector('td:nth-child(2)').textContent.toLowerCase();\n        const userContact = row.querySelector('td:nth-child(3)').textContent.toLowerCase();\n\n        if (userId.includes(query) || userName.includes(query) || userContact.includes(query)) {\n            row.style.display = '';\n        } else {\n            row.style.display = 'none';\n        }\n\n\n    });\n}\n// Handle the \"Enter\" key press event on the form\nform.addEventListener('keydown', async (e) => {\n    if (e.key === 'Enter') {\n        // Prevent the default form submission behavior\n        e.preventDefault();\n\n        // Trigger the \"Save\" button click event\n        btnSave.click();\n    }\n});\n\n\n"],"names":[],"version":3,"file":"index.b5b08f12.js.map","sourceRoot":"/__parcel_source_root/"}